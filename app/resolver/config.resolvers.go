package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/ryanfaerman/netctl/app/graph"
	"github.com/ryanfaerman/netctl/app/model"
	"github.com/ryanfaerman/netctl/config"
)

// Config is the resolver for the config field.
func (r *queryResolver) Config(ctx context.Context, uri string) (*model.Config, error) {
	value := config.Get(uri)
	return &model.Config{
		URI:   uri,
		Value: &value,
	}, nil
}

// Configs is the resolver for the configs field.
func (r *queryResolver) Configs(ctx context.Context) ([]*model.Config, error) {
	output := []*model.Config{}
	for _, item := range config.All() {
		output = append(output, &model.Config{
			URI:   item.Uri,
			Value: &item.Data,
		})
	}
	return output, nil
}

// Flag is the resolver for the flag field.
func (r *queryResolver) Flag(ctx context.Context, uri string) (*bool, error) {
	value := config.Flag.Get(uri)

	return &value, nil
}

// Flags is the resolver for the flags field.
func (r *queryResolver) Flags(ctx context.Context) ([]*model.Flag, error) {
	output := []*model.Flag{}
	for _, item := range config.Flag.All() {
		output = append(output, &model.Flag{
			URI:   item.Uri,
			Value: item.Data == "true",
		})
	}
	return output, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
