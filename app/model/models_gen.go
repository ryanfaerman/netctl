// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Channel interface {
	IsChannel()
	GetID() int64
	GetName() string
	GetDescription() string
}

type Checkin struct {
	ID           int64  `json:"id"`
	Callsign     string `json:"callsign"`
	Name         string `json:"name"`
	Location     string `json:"location"`
	Remarks      string `json:"remarks"`
	Time         string `json:"time"`
	Traffic      int    `json:"traffic"`
	Announcement bool   `json:"announcement"`
	Acknowledged bool   `json:"acknowledged"`
	Role         string `json:"role"`
}

type Config struct {
	URI   string  `json:"uri"`
	Value *string `json:"value,omitempty"`
}

type Controller struct {
	ID       int64  `json:"id"`
	Callsign string `json:"callsign"`
	Role     string `json:"role"`
}

type Flag struct {
	URI   string `json:"uri"`
	Value bool   `json:"value"`
}

type Metadata struct {
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
}

type Net struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	References  []string      `json:"references"`
	Preamble    string        `json:"preamble"`
	Agenda      string        `json:"agenda"`
	Closing     string        `json:"closing"`
	Channels    []Channel     `json:"channels"`
	Controllers []*Controller `json:"controllers"`
}

type NetMeeting struct {
	ID       int64      `json:"id"`
	Net      *Net       `json:"net"`
	Date     string     `json:"date"`
	Start    string     `json:"start"`
	End      string     `json:"end"`
	Checkins []*Checkin `json:"checkins"`
}

type Reflector struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Reflector   string `json:"reflector"`
}

func (Reflector) IsChannel()                  {}
func (this Reflector) GetID() int64           { return this.ID }
func (this Reflector) GetName() string        { return this.Name }
func (this Reflector) GetDescription() string { return this.Description }

type Repeater struct {
	ID           int64       `json:"id"`
	Name         string      `json:"name"`
	Description  string      `json:"description"`
	Downlink     float64     `json:"downlink"`
	DownlinkTone float64     `json:"downlinkTone"`
	Uplink       float64     `json:"uplink"`
	UplinkTone   float64     `json:"uplinkTone"`
	Offset       float64     `json:"offset"`
	Location     string      `json:"location"`
	Modes        []RadioMode `json:"modes"`
}

func (Repeater) IsChannel()                  {}
func (this Repeater) GetID() int64           { return this.ID }
func (this Repeater) GetName() string        { return this.Name }
func (this Repeater) GetDescription() string { return this.Description }

type Simplex struct {
	ID          int64   `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Frequency   float64 `json:"frequency"`
}

func (Simplex) IsChannel()                  {}
func (this Simplex) GetID() int64           { return this.ID }
func (this Simplex) GetName() string        { return this.Name }
func (this Simplex) GetDescription() string { return this.Description }

type System struct {
	Version   string `json:"version"`
	Uptime    string `json:"uptime"`
	Memory    int    `json:"memory"`
	Processes int    `json:"processes"`
}

type Talkgroup struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Talkgroup   int    `json:"talkgroup"`
}

func (Talkgroup) IsChannel()                  {}
func (this Talkgroup) GetID() int64           { return this.ID }
func (this Talkgroup) GetName() string        { return this.Name }
func (this Talkgroup) GetDescription() string { return this.Description }

type RadioMode string

const (
	RadioModeAnalog       RadioMode = "Analog"
	RadioModeDmr          RadioMode = "DMR"
	RadioModeDstar        RadioMode = "DSTAR"
	RadioModeSystemFusion RadioMode = "SystemFusion"
)

var AllRadioMode = []RadioMode{
	RadioModeAnalog,
	RadioModeDmr,
	RadioModeDstar,
	RadioModeSystemFusion,
}

func (e RadioMode) IsValid() bool {
	switch e {
	case RadioModeAnalog, RadioModeDmr, RadioModeDstar, RadioModeSystemFusion:
		return true
	}
	return false
}

func (e RadioMode) String() string {
	return string(e)
}

func (e *RadioMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RadioMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RadioMode", str)
	}
	return nil
}

func (e RadioMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
