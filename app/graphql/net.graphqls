extend type Query {
  nets: [Net!]!
}

type Net {
  id: ID!
  name: String!
  description: String!
  references: [String!]!

  preamble: String!
  agenda: String!
  closing: String!

  channels: [Channel!]!

  controllers: [Controller!]!

  # occurences?
  # kind? directed, open, ragchew?
}

type NetMeeting {
  id: ID!
  net: Net!
  date: String!
  start: String!
  end: String!
  checkins: [Checkin!]!
}

type Controller {
  id: ID!
  callsign: String!
  role: String!
}

type Checkin {
  id: ID!
  callsign: String!
  name: String!
  location: String!
  remarks: String!
  time: String!
  traffic: Int!
  announcement: Boolean!
  acknowledged: Boolean!
  role: String!
}

interface Channel {
  id: ID!
  name: String!
  description: String!
}


type Simplex implements Channel {
  id: ID!
  name: String!
  description: String!

  frequency: Float!
}

type Repeater implements Channel{
  id: ID!
  name: String!
  description: String!


  downlink: Float!
  downlinkTone: Float!
  uplink: Float!
  uplinkTone: Float!
  offset: Float!

  location: String!
  modes: [RadioMode!]!
}

enum RadioMode {
  Analog
  DMR
  DSTAR
  SystemFusion
}

type Talkgroup implements Channel{
  id: ID!
  name: String!
  description: String!

  talkgroup: Int!
}

type Reflector implements Channel {
  id: ID!
  name: String!
  description: String!

  reflector: String!
}
