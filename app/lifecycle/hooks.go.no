package lifecycle

import (
	"strconv"

	"github.com/ryanfaerman/netctl/board/model"
	"github.com/ryanfaerman/netctl/config"
	"github.com/ryanfaerman/netctl/hook"
)

type Event int

const (
	EventUnknown Event = iota
	EventCreate
	EventRead
	EventUpdate
	EventDelete
)

// TODO: clean up the stutter... lifecycle.Lifecycle
type Lifecycle[T any] struct {
	Model T
	Event Event
}

var (
	Board    *hook.Hook[Lifecycle[*model.Board]]
	Category *hook.Hook[Lifecycle[*model.Category]]
	Note     *hook.Hook[Lifecycle[*model.Note]]
)

const DEFAULT_CONCURRENCY = 50

func init() {

	config.Define("board.hook.concurrency", strconv.Itoa(DEFAULT_CONCURRENCY))

	// config.Get will block until the config is loaded, a goroutine is required
	// to prevent blocking the entire system from starting.
	go func() {
		concurrency, err := strconv.Atoi(
			config.Get("board.hook.concurrency", strconv.Itoa(DEFAULT_CONCURRENCY)),
		)
		if err != nil {
			concurrency = DEFAULT_CONCURRENCY
		}

		Board = hook.New[Lifecycle[*model.Board]]("lifecycle.board").WithLimit(concurrency)
		Category = hook.New[Lifecycle[*model.Category]]("lifecycle.category").WithLimit(concurrency)
		Note = hook.New[Lifecycle[*model.Note]]("lifecycle.note").WithLimit(concurrency)
	}()

}
