// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: nets.sql

package data

import (
	"context"
)

const net = `-- name: Net :one
SELECT id, createdat, updatedat, deletedat, name, tx_frequency, rx_frequency, tone, preamble, postamble FROM nets WHERE id = ?1 LIMIT 1
`

func (q *Queries) Net(ctx context.Context, id int64) (Net, error) {
	row := q.db.QueryRowContext(ctx, net, id)
	var i Net
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Name,
		&i.TxFrequency,
		&i.RxFrequency,
		&i.Tone,
		&i.Preamble,
		&i.Postamble,
	)
	return i, err
}

const nets = `-- name: Nets :many
SELECT id, createdat, updatedat, deletedat, name, tx_frequency, rx_frequency, tone, preamble, postamble FROM nets
`

func (q *Queries) Nets(ctx context.Context) ([]Net, error) {
	rows, err := q.db.QueryContext(ctx, nets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Net
	for rows.Next() {
		var i Net
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Name,
			&i.TxFrequency,
			&i.RxFrequency,
			&i.Tone,
			&i.Preamble,
			&i.Postamble,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
