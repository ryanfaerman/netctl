// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package data

import (
	"context"
	"database/sql"
)

const configs = `-- name: Configs :many
SELECT uri, data FROM configs
`

func (q *Queries) Configs(ctx context.Context) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, configs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(&i.Uri, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const defineConfig = `-- name: DefineConfig :exec
INSERT INTO configs (uri, data)
VALUES (?1, ?2)
ON CONFLICT(uri) DO NOTHING
`

type DefineConfigParams struct {
	Uri  string
	Data sql.NullString
}

func (q *Queries) DefineConfig(ctx context.Context, arg DefineConfigParams) error {
	_, err := q.db.ExecContext(ctx, defineConfig, arg.Uri, arg.Data)
	return err
}

const defineFlag = `-- name: DefineFlag :exec
INSERT INTO flags (uri, value)
VALUES (?1, ?2)
ON CONFLICT(uri) DO NOTHING
`

type DefineFlagParams struct {
	Uri   string
	Value sql.NullBool
}

func (q *Queries) DefineFlag(ctx context.Context, arg DefineFlagParams) error {
	_, err := q.db.ExecContext(ctx, defineFlag, arg.Uri, arg.Value)
	return err
}

const flags = `-- name: Flags :many
SELECT uri, value FROM flags
`

func (q *Queries) Flags(ctx context.Context) ([]Flag, error) {
	rows, err := q.db.QueryContext(ctx, flags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flag
	for rows.Next() {
		var i Flag
		if err := rows.Scan(&i.Uri, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfig = `-- name: GetConfig :one
SELECT data FROM configs
WHERE uri = ?
`

func (q *Queries) GetConfig(ctx context.Context, uri string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getConfig, uri)
	var data sql.NullString
	err := row.Scan(&data)
	return data, err
}

const getFlag = `-- name: GetFlag :one
SELECT value FROM flags
WHERE uri = ?
`

func (q *Queries) GetFlag(ctx context.Context, uri string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getFlag, uri)
	var value sql.NullBool
	err := row.Scan(&value)
	return value, err
}

const setConfig = `-- name: SetConfig :exec
INSERT INTO configs (uri, data)
VALUES (?1, ?2)
ON CONFLICT(uri) DO UPDATE
SET data = ?2
`

type SetConfigParams struct {
	Uri  string
	Data sql.NullString
}

func (q *Queries) SetConfig(ctx context.Context, arg SetConfigParams) error {
	_, err := q.db.ExecContext(ctx, setConfig, arg.Uri, arg.Data)
	return err
}

const setFlag = `-- name: SetFlag :exec

INSERT INTO flags (uri, value)
VALUES (?1, ?2)
ON CONFLICT(uri) DO UPDATE
SET value = ?2
`

type SetFlagParams struct {
	Uri   string
	Value sql.NullBool
}

// - Flags
func (q *Queries) SetFlag(ctx context.Context, arg SetFlagParams) error {
	_, err := q.db.ExecContext(ctx, setFlag, arg.Uri, arg.Value)
	return err
}

const setFlagDefault = `-- name: SetFlagDefault :exec
INSERT INTO flags (uri, value)
VALUES (?1, ?2)
ON CONFLICT DO NOTHING
`

type SetFlagDefaultParams struct {
	Uri   string
	Value sql.NullBool
}

func (q *Queries) SetFlagDefault(ctx context.Context, arg SetFlagDefaultParams) error {
	_, err := q.db.ExecContext(ctx, setFlagDefault, arg.Uri, arg.Value)
	return err
}

const unsetConfig = `-- name: UnsetConfig :exec
DELETE FROM configs WHERE uri=?
`

func (q *Queries) UnsetConfig(ctx context.Context, uri string) error {
	_, err := q.db.ExecContext(ctx, unsetConfig, uri)
	return err
}
