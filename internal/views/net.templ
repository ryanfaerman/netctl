package views

import "github.com/ryanfaerman/netctl/internal/models"
import "github.com/ryanfaerman/netctl/web/named"
import "strings"

type Net struct {
	Nets    []*models.Net
	Net     *models.Net
	Session *models.NetSession
	Stream  models.EventStream
}

func (v Net) Nav() Menu {
	return Menu{
		{Value: "Preamble", URL: "#", Icon: IconAttrs{Name: "file-lines"}},
		{Value: "Check Ins", URL: named.URLFor("net-session-show", v.Session.ID), Icon: IconAttrs{Name: "list-check"}},
		{Value: "Reports", URL: "#", Icon: IconAttrs{Name: "receipt"}},
		{Value: "Settings", URL: "#", Icon: IconAttrs{Name: "sliders"}},
	}
}

templ (n Net) List() {
	@Page(Menu{}) {
		<div class="modal">
			<div class="modal-header">
				<h1>Net List</h1>
			</div>
			<div class="modal-body">
				<a href={ templ.URL(named.URLFor("net-new")) } class="button">Start a new net</a>
				<ul>
					for _, net := range n.Nets {
						<li><a href={ templ.URL(named.URLFor("net-show", net.StreamID)) }>{ net.Name }</a></li>
					}
				</ul>
			</div>
		</div>
	}
}

templ (v Net) Create() {
	@BarePage() {
		<div class="modal">
			<div class="modal-header">
				<h1>Create a Net</h1>
			</div>
			<div class="modal-body">
				@v.CreateForm()
			</div>
		</div>
	}
}

type CreateNetFormInput struct {
	Name string `validate:"required"`
}

type CreateNetFormErrors struct {
	Name string
}

templ (v Net) CreateForm() {
	@v.CreateFormWithErrors(CreateNetFormInput{}, CreateNetFormErrors{  })
}

templ (v Net) CreateFormWithErrors(input CreateNetFormInput, errs CreateNetFormErrors) {
	@Form("new-net", FormAttrs{
    Action: named.URLFor("net-create"),
    HX: templ.Attributes{
      "hx-swap": "innerHTML",
      "hx-disabled-elt": "#new-net input[type=submit]",
    },
  }) {
		@InputText("name", InputAttrs{
      Label: "Net Name", 
      HelpText: "Enter the name of the net",
      Value: input.Name,
      Error: errs.Name,
    })
		@InputSubmit(InputAttrs{Value: "Create Net"})
	}
}

templ (n Net) Show() {
	@Page(Menu{}) {
		<div class="grid-container split">
			<div>
				<h1>{ n.Net.Name }</h1>
				if len(n.Net.Sessions) == 0 {
					No Session Yet
					@Form("new-session", FormAttrs{
              Action: named.URLFor("net-session-new", n.Net.StreamID),
              HX: templ.Attributes{
                "hx-target": "body",
              },
            }) {
						@InputSubmit(InputAttrs{Value: "Start a Session"})
					}
					<button
						class="button"
						hx-post={ named.URLFor("net-session-new", n.Net.StreamID) }
						hx-target="body"
					>
						Start a Session
					</button>
				} else {
					Sessions
					@Form("new-session", FormAttrs{
              Action: named.URLFor("net-session-new", n.Net.StreamID),
              HX: templ.Attributes{
                "hx-target": "body",
              },
            }) {
						@InputSubmit(InputAttrs{Value: "Start a Session"})
					}
					<ul>
						for _, id := range n.Net.SessionIDs {
							<li>
								<a href={ templ.URL(named.URLFor("net-session-show", id)) }>
									{ n.Net.Sessions[id].CreatedAt.Format("2006-01-02 15:04:05") }
								</a>
							</li>
						}
					</ul>
				}
			</div>
			<div></div>
		</div>
	}
}

templ (v Net) SingleNetSession(streamID string) {
	@Page(Menu{
		{Value: "Preamble", URL: "#", Icon: IconAttrs{Name: "file-lines"}},
		{Value: "Check Ins", URL: named.URLFor("net-session-show", streamID), Icon: IconAttrs{Name: "list-check"}},
		{Value: "Reports", URL: "#", Icon: IconAttrs{Name: "receipt"}},
		{Value: "Settings", URL: "#", Icon: IconAttrs{Name: "sliders"}, CanAction: "edit", CanResource: v.Net},
	}) {
		<div class="grid-container split">
			<div>
				@Can("perform-checkins", v.Net) {
					<div class="sticky mast-head-form">
						@v.CheckinForm()
						<div class="mast-head-divider"></div>
					</div>
				}
				@Cannot("perform-checkins", v.Net) {
					<h4>
						Check-ins
					</h4>
					<p>Only registered Net Control stations are permitted to receive check-ins to this net.</p>
					<div class="mast-head-divider"></div>
				}
				<div
					hx-ext="sse"
					sse-connect={ named.URLFor("sse-source") + "?stream=" + streamID }
					class={ templ.KV("stickable", UserCan(ctx, "perform-checkins", v.Net)) }
				>
					@v.TrafficTable(streamID)
				</div>
				@FeatureFlag("net.session.timeline") {
					<h3>Timeline</h3>
					<div class="timeline">
						for _, event := range v.Stream {
							@v.TimelineItem(event)
						}
					</div>
				}
			</div>
			<div>
				<div class="sidebar">
					<div class="sidebar-item">
						<h4>
							{ v.Net.Name }
							<small>{ v.Session.CreatedAt.Format("Monday, January 2, 2006 15:04") }</small>
						</h4>
					</div>
					<div class="sidebar-item">
						<details open>
							<summary>
								Description
							</summary>
							<p>
								Our purpose is to pass formal written traffic, announce amateur radio events, deliver 
								information on severe Weather, and to provide training for new operators and net 
								control stations. We also provide emergency communications, or special sessions when 
								necessary, and will assist agencies under Homeland Security, such as FEMA and Broward 
								County Emergency Management, and the Broward County Emergency Coordinator, if called
								upon to do so.
							</p>
							<p>
								Thank you for visiting and we hope you will join us on the air.
							</p>
							<dl>
								<dt>Manager</dt>
								<dd>Ken Polkerson [W44BUG]</dd>
								<dt>Regional Liasons</dt>
								<dd>Arthur McCallister [W4BUG]</dd>
								<dd>Arthur McCallister [W4BUG]</dd>
								<dd>Arthur McCallister [W4BUG]</dd>
								<dt>Controllers</dt>
								<dd>Arthur McCallister [W4BUG]</dd>
								<dd>Arthur McCallister [W4BUG]</dd>
								<dd>Arthur McCallister [W4BUG]</dd>
								<dd>Arthur McCallister [W4BUG]</dd>
							</dl>
						</details>
					</div>
					<div class="sidebar-item">
						<details open>
							<summary>
								Schedule
							</summary>
							<dl>
								<dt>Monday</dt>
								<dd>18:00 EST</dd>
								<dt>Tuesday</dt>
								<dd>18:00 EST</dd>
								<dt>Wednesday</dt>
								<dd>18:00 EST</dd>
								<dt>Thursday</dt>
								<dd>18:00 EST</dd>
								<dt>Friday</dt>
								<dd>18:00 EST</dd>
								<dt>Sat - Sun</dt>
								<dd>NO NET</dd>
							</dl>
						</details>
					</div>
					<div class="sidebar-item">
						<details>
							<summary>
								Radio Settings
							</summary>
							<dl>
								<dt>Type</dt>
								<dd>Primary</dd>
								<dt>Frequency</dt>
								<dd>
									@IconSolid("arrow-down")
									146.610
								</dd>
								<dd>
									@IconSolid("arrow-up")
									146.010
								</dd>
								<dt>Tone</dt>
								<dd>110.9</dd>
							</dl>
							<dl>
								<dt>Type</dt>
								<dd>Backup</dd>
								<dt>Frequency</dt>
								<dd>
									@IconSolid("arrow-down")
									146.790
								</dd>
								<dd>
									@IconSolid("arrow-up")
									146.190
								</dd>
								<dt>Tone</dt>
								<dd>88.5</dd>
							</dl>
						</details>
					</div>
				</div>
			</div>
		</div>
	}
}

templ (v Net) TrafficTable(streamID string) {
	@TrafficTable("checkin-list", TableAttrs{
          Caption: "Checkins for " + streamID,
          Headers: []string{
              "",
              "Callsign",
              "Name",
              "Location",
              "Traffic Type",
              "Time In",
            },
        }) {
		for _, checkin := range v.Session.Checkins {
			@v.CheckinRow(checkin)
		}
		<tr id="replaceme" sse-swap="message" hx-swap="outerHTML settle:1s"></tr>
	}
}

type CheckinFormInput struct {
	Callsign string `validate:"required,alphanum"`
	Name     string
	Traffic  string `validate:"required"`
}

type CheckinFormErrors struct {
	Callsign string
	Name     string
	Traffic  string
}

templ (v Net) CheckinForm() {
	@v.CheckinFormWithErrors(CheckinFormInput{}, CheckinFormErrors{})
}

templ (v Net) CheckinFormWithErrors(input CheckinFormInput, errs CheckinFormErrors) {
	@Form("check-in-form", FormAttrs{

    Action: named.URLFor("net-session-checkin", v.Net.StreamID, v.Session.ID),
    HX: templ.Attributes{
      "hx-swap": "innerHTML",
    },
    }) {
		<div class="grid-container quarters">
			@InputText("call-sign", InputAttrs{
        Label: "Callsign", 
        HelpText:"Enter the callsign",
        Value: input.Callsign,
        Error: errs.Callsign,
      })
			@InputText("name", InputAttrs{
        Label: "Name", 
        HelpText: "Override the FCC Listing",
        Value: input.Name,
        Error: errs.Name,
        DisableAutocomplete: true,
      })
			@Select("traffic", InputAttrs{
        Label: "Traffic Type",
        Options: []string{
          "Routine",
          "Priority",
          "Welfare",
          "Emergency",
          "Traffic",
          "Question",
          "Announcement",
          "Comment",
          "Weather",
          },
          Value: input.Traffic,
          Error: errs.Traffic,
        })
			@InputSubmit(InputAttrs{Value: "Check In"})
		</div>
	}
}

templ (n Net) CheckinRow(checkin models.NetCheckin, isNew ...bool) {
	<tr
		id={ checkin.ID }
		class={ strings.ToLower(checkin.Kind.String()) }
		hx-swap="outerHTML settle:1s"
		hx-get={ named.URLFor("get-checkin", n.Net.StreamID, n.Session.ID, checkin.ID) }
		if !checkin.Verified {
			hx-trigger={ join(", ", "load delay:1s", join(":", "sse", checkin.ID)) }
		} else {
			hx-trigger={ join(":", "sse", checkin.ID) }
		}
	>
		<td class="checkin-actions">
			<ul class="actions">
				<li>
					if checkin.Verified {
						<span title="Station Verification is complete">
							@IconSolid("shield-halved")
						</span>
					} else {
						<span title="Verifying the station">
							@IconSolid("users-viewfinder")
						</span>
					}
				</li>
				<li>
					if checkin.Verified && checkin.Valid == nil {
						<span title="Station is licensed">
							@IconSolid("user-check")
						</span>
					} else {
						<span title="Station cannot be verified as licensed">
							@IconSolid("user-slash")
						</span>
					}
				</li>
				<li>
					if checkin.Acked {
						<span title="Acknowledged">
							@IconSolid("check")
						</span>
					} else {
						@Can("perform-checkins", n.Net) {
							<span
								title="Not Acknowledged"
								hx-post={ named.URLFor("checkin-ack", n.Session.ID, checkin.ID) }
							>
								@Icon(IconAttrs{
                    Name: "hand",
                    Kind: "regular",
                    Bounce: true,
                  })
							</span>
						}
						@Cannot("perform-checkins", n.Net) {
							<span title="Not Acknowledged">
								@IconRegular("hand")
							</span>
						}
					}
				</li>
			</ul>
		</td>
		<td class="checkin-callsign">
			<span
				class={ "callsign", templ.KV("is-verified", checkin.Verified), templ.KV("is-invalid", !checkin.Verified || checkin.Valid != nil) }
				if checkin.Verified && checkin.Valid == nil {
					title="Station is licensed"
				} else {
					title="Station cannot be verified as licensed"
				}
			>
				{ checkin.Callsign.AsHeard }
			</span>
		</td>
		<td class="checkin-name">
			if checkin.Name.AsHeard != "" {
				{ checkin.Name.AsHeard }
			} else {
				if checkin.Name.AsLicensed != "" {
					{ checkin.Name.AsLicensed }
				} else {
					UNKNOWN
				}
			}
		</td>
		<td class="checkin-location">
			if checkin.Location.AsLicensed != "" {
				{ checkin.Location.AsLicensed }
			} else {
				UNKNOWN
			}
		</td>
		<td class="checkin-traffic-type">
			{ checkin.Kind.String() }
		</td>
		<td class="checkin-time-in">
			{ checkin.At.Format("15:04:05") }
		</td>
	</tr>
	if len(isNew) > 0 {
		<tr sse-swap="message" hx-swap="outerHTML settle:1s"></tr>
	}
}

templ (n Net) TimelineItem(event models.Event) {
	<div class="timeline-item">
		<div class="timeline-badge">
			@IconSolid("play")
		</div>
		<div class="timeline-body">
			<div class="event">
				switch event.Name {
					case "events.NetCheckinHeard":
						Heard a new checkin
					case "events.NetCheckinAcked":
						Acknowledged a checkin
					case "events.NetCheckinVerified":
						A station was verified
				}
				<!-- <a href="#" class="subject">W4BUG</a>
				checked in by
				<a href="#" class="author">W4BUG</a>
				{ event.Name } -->
			</div>
			<div class="timestamp">
				<code>{ event.At.Format("15:04:15") }</code>
			</div>
		</div>
	</div>
}
