package views

import "github.com/ryanfaerman/netctl/internal/models"
import "github.com/ryanfaerman/netctl/web/named"
import "strconv"
import "strings"

type Net struct {
	Nets    []*models.Net
	Net     *models.Net
	Session *models.NetSession
	Stream  models.EventStream
}

templ (n Net) List() {
	@Page() {
		<ul>
			for _, net := range n.Nets {
				<li>{ named.URLFor("net-show", strconv.FormatInt(net.ID, 10)) }</li>
				<li><a href={ templ.URL(named.URLFor("net-show", strconv.FormatInt(net.ID, 10))) }>{ net.Name }</a></li>
			}
		</ul>
	}
}

templ (v Net) Create() {
	@Page() {
		<div class="modal">
			<div class="modal-header">
				<h1>Create a Net</h1>
			</div>
			<div class="modal-body">
				@v.CreateForm()
			</div>
		</div>
	}
}

type CreateNetFormInput struct {
	Name string `validate:"required"`
}

type CreateNetFormErrors struct {
	Name string
}

templ (v Net) CreateForm() {
	@v.CreateFormWithErrors(CreateNetFormInput{}, CreateNetFormErrors{  })
}

templ (v Net) CreateFormWithErrors(input CreateNetFormInput, errs CreateNetFormErrors) {
	@Form("new-net", FormAttrs{
    Action: named.URLFor("net-create"),
    HX: templ.Attributes{
      "hx-swap": "innerHTML",
      "hx-disabled-elt": "#new-net input[type=submit]",
    },
  }) {
		@InputText("name", InputAttrs{
      Label: "Net Name", 
      HelpText: "Enter the name of the net",
      Value: input.Name,
      Error: errs.Name,
    })
		@InputSubmit(InputAttrs{Value: "Create Net"})
	}
}

templ (n Net) Show() {
	@Page() {
		<div class="grid-container split">
			<div>
				<h1>{ n.Net.Name }</h1>
				if len(n.Net.Sessions) == 0 {
					No Session Yet
					@Form("new-session", FormAttrs{
              Action: named.URLFor("net-session-new", strconv.FormatInt(n.Net.ID, 10)),
              HX: templ.Attributes{
                "hx-target": "body",
              },
            }) {
						@InputSubmit(InputAttrs{Value: "Start a Session"})
					}
					<button
						class="button"
						hx-post={ named.URLFor("net-session-new", strconv.FormatInt(n.Net.ID, 10)) }
						hx-target="body"
					>
						Start a Session
					</button>
				} else {
					Sessions
					@Form("new-session", FormAttrs{
              Action: named.URLFor("net-session-new", strconv.FormatInt(n.Net.ID, 10)),
              HX: templ.Attributes{
                "hx-target": "body",
              },
            }) {
						@InputSubmit(InputAttrs{Value: "Start a Session"})
					}
					for _, session := range n.Net.Sessions {
						<a href={ templ.URL(named.URLFor("net-session-show", strconv.FormatInt(n.Net.ID, 10), session.ID)) }>
							{ session.ID }
							{ session.CreatedAt.Format("2006-01-02 15:04:05") }
						</a>
					}
				}
			</div>
			<div></div>
		</div>
	}
}

templ (v Net) SingleNetSession(streamID string) {
	@Page() {
		<div class="grid-container split">
			<div>
				<div class="sticky mast-head-form">
					<h1>{ v.Net.Name }</h1>
					@v.CheckinForm()
					<div class="mast-head-divider"></div>
				</div>
				@v.TrafficTable(streamID)
				<h3>Timeline</h3>
				<div class="timeline">
					for _, event := range v.Stream {
						@v.TimelineItem(event)
					}
				</div>
			</div>
			<div></div>
		</div>
	}
}

templ (v Net) TrafficTable(streamID string) {
	@TrafficTable("checkin-list", TableAttrs{
          Caption: "Checkins for " + streamID,
          Headers: []string{
              "Callsign",
              "Name",
              "Location",
              "Traffic Type",
              "Time In",
            },
        }) {
		for _, checkin := range v.Session.Checkins {
			@v.CheckinRow(checkin)
		}
	}
}

type CheckinFormInput struct {
	Callsign string `validate:"required,alphanum"`
	Name     string
	Traffic  string `validate:"required"`
}

type CheckinFormErrors struct {
	Callsign string
	Name     string
	Traffic  string
}

templ (v Net) CheckinForm() {
	@v.CheckinFormWithErrors(CheckinFormInput{}, CheckinFormErrors{})
}

templ (v Net) CheckinFormWithErrors(input CheckinFormInput, errs CheckinFormErrors) {
	@Form("check-in-form", FormAttrs{

    Action: named.URLFor("net-session-checkin", "3", "01HMW38CWXQQ7SK1RPQ37N58H4"),
    HX: templ.Attributes{
      "hx-swap": "innerHTML",
    },
    }) {
		<div class="grid-container quarters">
			@InputText("call-sign", InputAttrs{
        Label: "Callsign", 
        HelpText:"Enter the callsign",
        Value: input.Callsign,
        Error: errs.Callsign,
      })
			@InputText("name", InputAttrs{
        Label: "Name", 
        HelpText: "Override the FCC Listing",
        Value: input.Name,
        Error: errs.Name,
        DisableAutocomplete: true,
      })
			@Select("traffic", InputAttrs{
        Label: "Traffic Type",
        Options: []string{
          "Routine",
          "Priority",
          "Welfare",
          "Emergency",
          "Traffic",
          "Question",
          "Announcement",
          "Comment",
          "Weather",
          },
          Value: input.Traffic,
          Error: errs.Traffic,
        })
			@InputSubmit(InputAttrs{Value: "Check In"})
		</div>
	}
}

templ (n Net) CheckinRow(checkin models.NetCheckin) {
	<tr class={ strings.ToLower(checkin.Kind.String()) }>
		<td class="checkin-callsign">
			<span class="callsign">
				{ checkin.Callsign.AsHeard }
			</span>
		</td>
		<td class="checkin-name">
			if checkin.Name.AsHeard != "" {
				{ checkin.Name.AsHeard }
			} else {
				if checkin.Name.AsLicensed != "" {
					{ checkin.Name.AsLicensed }
				} else {
					UNKNOWN
				}
			}
		</td>
		<td class="checkin-location">
			if checkin.Location.AsLicensed != "" {
				{ checkin.Location.AsLicensed }
			} else {
				UNKNOWN
			}
		</td>
		<td class="checkin-traffic-type">
			{ checkin.Kind.String() }
		</td>
		<td class="checkin-time-in">
			{ checkin.At.Format("15:04:05") }
		</td>
	</tr>
}

templ (n Net) TimelineItem(event models.Event) {
	<div class="timeline-item">
		<div class="timeline-badge">
			@Icon("play")
		</div>
		<div class="timeline-body">
			<div class="event">
				<a href="#" class="subject">W4BUG</a>
				checked in by
				<a href="#" class="author">W4BUG</a>
				{ event.Name }
			</div>
			<div class="timestamp">
				<code>{ event.At.Format("15:04:15") }</code>
			</div>
		</div>
	</div>
}
