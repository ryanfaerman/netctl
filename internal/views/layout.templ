package views

import "fmt"

import "github.com/ryanfaerman/netctl/web/named"

func DefaultMenu() Menu {
	return Menu{
		{Value: "Home", URL: named.URLFor("dashboard-index"), Icon: IconAttrs{Name: "house"}},
		{Value: "View Nets", URL: named.URLFor("net-index"), Icon: IconAttrs{Name: "users-rectangle"}},
	}
}

templ Page(m Menu) {
	@BarePage() {
		if len(m) == 0 {
			@DefaultMenu().NewAppBar()
		} else {
			@m.NewAppBar()
		}
		{ children... }
	}
}

templ BarePage() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>NetControl</title>
			<meta charset="utf-8"/>
			<meta name="description" content="describe"/>
			<meta name="author" content="author"/>
			@MetaVersion()
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<link rel="stylesheet" href="/static/normalize.css"/>
			<link rel="stylesheet" href="/static/barebones.css"/>
			<link rel="stylesheet" href="/static/custom.css"/>
			<link href="/static/fontawesome/css/fontawesome.css" rel="stylesheet"/>
			<link href="/static/fontawesome/css/all.min.css" rel="stylesheet"/>
		</head>
		<body hx-ext="morph">
			<div id="htmx-alert" class="alert alert-warning sticky-top" hidden></div>
			{ children... }
			<script src="/static/htmx.min.js"></script>
			<script src="/static/idiomorph-ext.min.js"></script>
			<script src="/static/sse.js"></script>
			<script src="/static/custom.js"></script>
		</body>
	</html>
}

type IconAttrs struct {
	Kind     string
	Name     string
	SwapKind string
	SwapName string
}

func (i IconAttrs) String() string {
	if i.Kind == "" {
		i.Kind = "solid"
	}
	if i.SwapName != "" {
		return fmt.Sprintf("initial fa-%s fa-%s", i.Kind, i.Name)
	}
	return fmt.Sprintf("fa-%s fa-%s", i.Kind, i.Name)
}

func (i IconAttrs) Swapped() string {
	if i.SwapName == "" {
		return ""
	}
	if i.SwapKind == "" {
		i.SwapKind = "solid"
	}
	return fmt.Sprintf("hover fa-%s fa-%s", i.SwapKind, i.SwapName)
}

func (i IconAttrs) IsZeroValue() bool { return i.Kind == "" && i.Name == "" }

templ Icon(attrs IconAttrs) {
	if attrs.Swapped() != "" {
		<i class="swap-icon">
			<i class={ attrs.String() }></i>
			<i class={ attrs.Swapped() }></i>
		</i>
	} else {
		<i class={ attrs.String() }></i>
	}
}

templ IconSolid(name string) {
	@Icon(IconAttrs{Kind: "solid", Name: name})
}

templ IconRegular(name string) {
	@Icon(IconAttrs{Kind: "regular", Name: name})
}

templ IconBrand(name string) {
	@Icon(IconAttrs{Kind: "brand", Name: name})
}

type TableAttrs struct {
	Caption string
	Headers []string
}

func (t TableAttrs) HasCaption() bool { return t.Caption != "" }
func (t TableAttrs) HasHeader() bool  { return len(t.Headers) > 0 }

templ TrafficTable(id string, attrs TableAttrs) {
	<table id={ id } class="traffic-data u-full-width" hx-swap-oob="true">
		if attrs.HasCaption() {
			<caption>{ attrs.Caption }</caption>
		}
		if attrs.HasHeader() {
			<thead id={ join("-", id, "head") }>
				<tr>
					for _, header := range attrs.Headers {
						<th>{ header }</th>
					}
				</tr>
			</thead>
		}
		<tbody id={ join("-", id, "body") }>
			{ children... }
		</tbody>
	</table>
}

templ TrafficRow() {
}

templ Announcement(title, body string) {
	<div class="announcement">
		<div class="announcement-content">
			<strong>{ title }:</strong> { body }
		</div>
	</div>
}

templ SplitLayout(main, sidebar templ.Component) {
	<div class="grid-container split">
		<div>
			@main
		</div>
		<div>
			@sidebar
		</div>
	</div>
}

templ Timeline() {
	<div class="timeline">
		{ children... }
	</div>
}
