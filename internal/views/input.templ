package views

import "github.com/ryanfaerman/netctl/internal/services"

type InputType string

const (
	InputTypeText     InputType = "text"
	InputTypeEmail    InputType = "email"
	InputTypePassword InputType = "password"
	InputTypeSelect   InputType = "select"
)

func (i InputType) String() string {
	return string(i)
}

type InputAttrs struct {
	Label       string
	Value       string
	HelpText    string
	Placeholder string
	Error       string
	Options     []string

	DisableAutocomplete bool
	DisableHTMX         bool
}

func (a InputAttrs) HasLabel() bool       { return len(a.Label) > 0 }
func (a InputAttrs) HasValue() bool       { return len(a.Value) > 0 }
func (a InputAttrs) HasHelpText() bool    { return len(a.HelpText) > 0 }
func (a InputAttrs) HasPlaceholder() bool { return len(a.Placeholder) > 0 }
func (a InputAttrs) HasError() bool       { return len(a.Error) > 0 }

type FormAttrs struct {
	Action string
	Method string

	DisableHTMX bool
	DisableCSRF bool

	HX templ.Attributes
}

func (a FormAttrs) HasAction() bool { return len(a.Action) > 0 }
func (a FormAttrs) HasMethod() bool { return len(a.Method) > 0 }

templ Form(id string, attrs FormAttrs) {
	<form
 		id={ id }
 		if attrs.HasAction() {
			action={ templ.URL(attrs.Action) }
		}
 		if attrs.HasMethod() {
			method={ attrs.Method }
		} else {
			method="post"
		}
 		if !attrs.DisableHTMX && attrs.HasAction() {
			hx-post={ attrs.Action }
			hx-swap-oob="true"
		}

    { attrs.HX... }
	>
		if !attrs.DisableCSRF {
			<input type="hidden" name="csrf_token" value={ services.CSRF.GetToken(ctx) }/>
		}
		{ children... }
	</form>
}

templ Input(kind InputType, name string, attrs InputAttrs) {
	<div class={ "input-group", templ.KV("error", attrs.HasError()) }>
		if attrs.HasLabel() {
			<label for={ name }>{ attrs.Label }</label>
		}
		<input
 			type={ kind.String() }
 			id={ name }
 			name={ name }
 			class="u-full-width"
 			if attrs.HasValue() {
				value={ attrs.Value }
			}
 			if  attrs.HasPlaceholder() {
				placeholder={ attrs.Placeholder }
			}
		/>
		<div class="input-annotations u-full-width">
			if attrs.HasHelpText() {
				<div class="help-text">{ attrs.HelpText }</div>
			}
			if attrs.HasError() {
				<div class="error-message">{ attrs.Error }</div>
			}
		</div>
	</div>
}

templ InputText(name string, attrs InputAttrs) {
	@Input(InputTypeText, name, attrs)
}

templ (i InputAttrs) Input(name string) {
	@Input(InputTypePassword, name, i)
}

templ InputEmail(name string, attrs InputAttrs) {
	@Input(InputTypeEmail, name, attrs)
}

templ Select(name string, attrs InputAttrs) {
	<div class={ "input-group", templ.KV("error", attrs.HasError()) }>
		if attrs.HasLabel() {
			<label for={ name }>{ attrs.Label }</label>
		}
		<select id={ name } name={ name } class="u-full-width">
			for _, option := range attrs.Options {
				if attrs.HasValue() && option == attrs.Value {
					<option value={ option } selected>{ option }</option>
				} else {
					<option value={ option }>{ option }</option>
				}
			}
		</select>
		if attrs.HasHelpText() {
			<div class="help-text">{ attrs.HelpText }</div>
		}
		if attrs.HasError() {
			<div class="error-message">{ attrs.Error }</div>
		}
	</div>
}

templ InputSubmit(attrs InputAttrs) {
	<div class="button-group">
		<input type="submit" class="button-primary u-full-width" value={ attrs.Value }/>
	</div>
}
