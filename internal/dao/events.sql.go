// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: events.sql

package dao

import (
	"context"
	"strings"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
  created, stream_id, account_id, event_type, event_data
)
VALUES (
  CURRENT_TIMESTAMP, ?1, ?2, ?3, ?4
)
`

type CreateEventParams struct {
	StreamID  string
	AccountID int64
	EventType string
	EventData []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.StreamID,
		arg.AccountID,
		arg.EventType,
		arg.EventData,
	)
	return err
}

const getEventsForStream = `-- name: GetEventsForStream :many
SELECT id, created, stream_id, account_id, event_type, event_data FROM events
WHERE stream_id = ?1
`

func (q *Queries) GetEventsForStream(ctx context.Context, streamID string) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsForStream, streamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.StreamID,
			&i.AccountID,
			&i.EventType,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsForStreams = `-- name: GetEventsForStreams :many
SELECT id, created, stream_id, account_id, event_type, event_data FROM events
WHERE stream_id IN (/*SLICE:stream_ids*/?)
`

func (q *Queries) GetEventsForStreams(ctx context.Context, streamIds []string) ([]Event, error) {
	query := getEventsForStreams
	var queryParams []interface{}
	if len(streamIds) > 0 {
		for _, v := range streamIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:stream_ids*/?", strings.Repeat(",?", len(streamIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:stream_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.StreamID,
			&i.AccountID,
			&i.EventType,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
