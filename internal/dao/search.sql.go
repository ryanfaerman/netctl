// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: search.sql

package dao

import (
	"context"
	"database/sql"
)

const searchCallsignsWithinRange = `-- name: SearchCallsignsWithinRange :many
SELECT id, latitude, longitude,
    (6371 * 2 * ASIN(SQRT(POWER(SIN((?1 - ABS(latitude)) * pi()/180 / 2), 2) +
        COS(?1 * pi()/180 ) * COS(ABS(latitude) * pi()/180) *
        POWER(SIN((?2 - longitude) * pi()/180 / 2), 2)))) AS distance
FROM callsigns
WHERE distance <= ?3
`

type SearchCallsignsWithinRangeParams struct {
	Latitude  sql.NullFloat64
	Longitude sql.NullFloat64
	Distance  sql.NullFloat64
}

type SearchCallsignsWithinRangeRow struct {
	ID        int64
	Latitude  sql.NullFloat64
	Longitude sql.NullFloat64
	Distance  interface{}
}

func (q *Queries) SearchCallsignsWithinRange(ctx context.Context, arg SearchCallsignsWithinRangeParams) ([]SearchCallsignsWithinRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, searchCallsignsWithinRange, arg.Latitude, arg.Longitude, arg.Distance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchCallsignsWithinRangeRow
	for rows.Next() {
		var i SearchCallsignsWithinRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longitude,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testCount = `-- name: TestCount :one
SELECT COUNT(*) as da_count FROM callsigns WHERE da_count > 0
`

func (q *Queries) TestCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, testCount)
	var da_count int64
	err := row.Scan(&da_count)
	return da_count, err
}
