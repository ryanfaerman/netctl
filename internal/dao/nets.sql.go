// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: nets.sql

package dao

import (
	"context"
)

const createNetAndReturnId = `-- name: CreateNetAndReturnId :one
INSERT INTO nets (
  name,
  created,
  updated
) VALUES (
  ?1,
  CURRENT_TIMESTAMP,
  CURRENT_TIMESTAMP
)
RETURNING id
`

func (q *Queries) CreateNetAndReturnId(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNetAndReturnId, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createNetEvent = `-- name: CreateNetEvent :exec
INSERT INTO net_events (
  created,
  net_id,
  session_id,
  account_id,
  event_type,
  event_data
) VALUES (
  CURRENT_TIMESTAMP,
  ?1,
  ?2,
  ?3,
  ?4,
  ?5
)
`

type CreateNetEventParams struct {
	NetID     int64
	SessionID string
	AccountID int64
	EventType string
	EventData []byte
}

func (q *Queries) CreateNetEvent(ctx context.Context, arg CreateNetEventParams) error {
	_, err := q.db.ExecContext(ctx, createNetEvent,
		arg.NetID,
		arg.SessionID,
		arg.AccountID,
		arg.EventType,
		arg.EventData,
	)
	return err
}

const getNet = `-- name: GetNet :one
SELECT id, name, created, updated, deleted FROM nets WHERE id = ?1
`

func (q *Queries) GetNet(ctx context.Context, id int64) (Net, error) {
	row := q.db.QueryRowContext(ctx, getNet, id)
	var i Net
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const getNetEvents = `-- name: GetNetEvents :many
SELECT id, created, net_id, session_id, account_id, event_type, event_data FROM net_events WHERE net_id = ?1
`

func (q *Queries) GetNetEvents(ctx context.Context, netID int64) ([]NetEvent, error) {
	rows, err := q.db.QueryContext(ctx, getNetEvents, netID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetEvent
	for rows.Next() {
		var i NetEvent
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.NetID,
			&i.SessionID,
			&i.AccountID,
			&i.EventType,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
