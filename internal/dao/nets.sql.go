// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: nets.sql

package dao

import (
	"context"
	"database/sql"
	"time"
)

const createNetAndReturnId = `-- name: CreateNetAndReturnId :one
INSERT INTO nets (
  name,
  created,
  updated
) VALUES (
  ?1,
  CURRENT_TIMESTAMP,
  CURRENT_TIMESTAMP
)
RETURNING id
`

func (q *Queries) CreateNetAndReturnId(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNetAndReturnId, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createNetSessionAndReturnId = `-- name: CreateNetSessionAndReturnId :one
INSERT INTO net_sessions (
  net_id, stream_id, created
)VALUES (
  ?1, ?2, CURRENT_TIMESTAMP
)
RETURNING id
`

type CreateNetSessionAndReturnIdParams struct {
	NetID    int64
	StreamID string
}

func (q *Queries) CreateNetSessionAndReturnId(ctx context.Context, arg CreateNetSessionAndReturnIdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNetSessionAndReturnId, arg.NetID, arg.StreamID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getNet = `-- name: GetNet :one
SELECT id, name, created, updated, deleted FROM nets WHERE id = ?1
`

func (q *Queries) GetNet(ctx context.Context, id int64) (Net, error) {
	row := q.db.QueryRowContext(ctx, getNet, id)
	var i Net
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const getNetForSession = `-- name: GetNetForSession :one
SELECT nets.id, nets.name, nets.created, nets.updated, nets.deleted, net_sessions.created AS session_created
FROM nets 
JOIN net_sessions ON net_sessions.net_id = nets.id
WHERE net_sessions.stream_id = ?1
`

type GetNetForSessionRow struct {
	ID             int64
	Name           string
	Created        time.Time
	Updated        time.Time
	Deleted        sql.NullTime
	SessionCreated time.Time
}

func (q *Queries) GetNetForSession(ctx context.Context, streamID string) (GetNetForSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getNetForSession, streamID)
	var i GetNetForSessionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
		&i.Deleted,
		&i.SessionCreated,
	)
	return i, err
}

const getNetSessionEvents = `-- name: GetNetSessionEvents :many
SELECT events.id, events.created, events.stream_id, events.account_id, events.event_type, events.event_data
FROM events
JOIN net_sessions ON events.stream_id = net_sessions.stream_id
WHERE net_sessions.net_id = ?1
`

func (q *Queries) GetNetSessionEvents(ctx context.Context, netID int64) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getNetSessionEvents, netID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.StreamID,
			&i.AccountID,
			&i.EventType,
			&i.EventData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNetSessions = `-- name: GetNetSessions :many
SELECT id, net_id, stream_id, created FROM net_sessions WHERE net_id = ?1
`

func (q *Queries) GetNetSessions(ctx context.Context, netID int64) ([]NetSession, error) {
	rows, err := q.db.QueryContext(ctx, getNetSessions, netID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetSession
	for rows.Next() {
		var i NetSession
		if err := rows.Scan(
			&i.ID,
			&i.NetID,
			&i.StreamID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNets = `-- name: GetNets :many
SELECT id, name, created, updated, deleted FROM nets
`

func (q *Queries) GetNets(ctx context.Context) ([]Net, error) {
	rows, err := q.db.QueryContext(ctx, getNets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Net
	for rows.Next() {
		var i Net
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Created,
			&i.Updated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
