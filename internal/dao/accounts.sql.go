// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accounts.sql

package dao

import (
	"context"
)

const associateSessionWithAccount = `-- name: AssociateSessionWithAccount :exec
INSERT INTO accounts_sessions (
  account_id, token, createdBy
) VALUES (
  ?1, ?2, ?3
)
`

type AssociateSessionWithAccountParams struct {
	AccountID int64
	Token     string
	Createdby string
}

func (q *Queries) AssociateSessionWithAccount(ctx context.Context, arg AssociateSessionWithAccountParams) error {
	_, err := q.db.ExecContext(ctx, associateSessionWithAccount, arg.AccountID, arg.Token, arg.Createdby)
	return err
}

const checkSlugAvailability = `-- name: CheckSlugAvailability :one
SELECT COUNT(*) as count FROM accounts WHERE slug = ?1
`

func (q *Queries) CheckSlugAvailability(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkSlugAvailability, slug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  name, kind, slug
) VALUES (
  ?1, ?2, ?3
)
RETURNING id
`

type CreateAccountParams struct {
	Name string
	Kind int64
	Slug string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Kind, arg.Slug)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createAccountAndReturnId = `-- name: CreateAccountAndReturnId :one
INSERT INTO accounts (
  createdAt, updatedAt
) VALUES (
  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id
`

func (q *Queries) CreateAccountAndReturnId(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAccountAndReturnId)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const findAccountByCallsign = `-- name: FindAccountByCallsign :one
SELECT accounts.id, accounts.name, accounts.createdat, accounts.updatedat, accounts.deletedat, accounts.kind, accounts.about, accounts.settings, accounts.slug
FROM accounts
JOIN accounts_callsigns ON accounts.id = accounts_callsigns.account_id
JOIN callsigns ON accounts_callsigns.callsign_id = callsigns.id
WHERE UPPER(callsigns.callsign) = UPPER(?1)
`

func (q *Queries) FindAccountByCallsign(ctx context.Context, upper string) (Account, error) {
	row := q.db.QueryRowContext(ctx, findAccountByCallsign, upper)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Kind,
		&i.About,
		&i.Settings,
		&i.Slug,
	)
	return i, err
}

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT accounts.id, accounts.name, accounts.createdat, accounts.updatedat, accounts.deletedat, accounts.kind, accounts.about, accounts.settings, accounts.slug
FROM accounts
JOIN emails ON emails.account_id = accounts.id
WHERE emails.address = ?1
`

func (q *Queries) FindAccountByEmail(ctx context.Context, address string) (Account, error) {
	row := q.db.QueryRowContext(ctx, findAccountByEmail, address)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Kind,
		&i.About,
		&i.Settings,
		&i.Slug,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT accounts.id, accounts.name, accounts.createdat, accounts.updatedat, accounts.deletedat, accounts.kind, accounts.about, accounts.settings, accounts.slug
FROM accounts
WHERE id = ?1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Kind,
		&i.About,
		&i.Settings,
		&i.Slug,
	)
	return i, err
}

const getAccountBySlug = `-- name: GetAccountBySlug :one
SELECT accounts.id, accounts.name, accounts.createdat, accounts.updatedat, accounts.deletedat, accounts.kind, accounts.about, accounts.settings, accounts.slug
FROM accounts
WHERE UPPER(slug) = UPPER(?1)
LIMIT 1
`

func (q *Queries) GetAccountBySlug(ctx context.Context, slug string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountBySlug, slug)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Kind,
		&i.About,
		&i.Settings,
		&i.Slug,
	)
	return i, err
}

const getAccountSetting = `-- name: GetAccountSetting :one
SELECT json_extract(settings, ?2)
FROM accounts
WHERE id = ?1
`

type GetAccountSettingParams struct {
	ID       int64
	Jsonpath interface{}
}

func (q *Queries) GetAccountSetting(ctx context.Context, arg GetAccountSettingParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAccountSetting, arg.ID, arg.Jsonpath)
	var json_extract interface{}
	err := row.Scan(&json_extract)
	return json_extract, err
}

const setAccountSetting = `-- name: SetAccountSetting :exec
UPDATE accounts
SET settings = json_set(settings, ?2, ?3)
WHERE id = ?1
`

type SetAccountSettingParams struct {
	ID        int64
	Jsonpath  interface{}
	Jsonvalue interface{}
}

func (q *Queries) SetAccountSetting(ctx context.Context, arg SetAccountSettingParams) error {
	_, err := q.db.ExecContext(ctx, setAccountSetting, arg.ID, arg.Jsonpath, arg.Jsonvalue)
	return err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET updatedAt = CURRENT_TIMESTAMP,
    name = ?2,
    about = ?3,
    kind = ?4
WHERE id = ?1
RETURNING id, name, createdat, updatedat, deletedat, kind, about, settings, slug
`

type UpdateAccountParams struct {
	ID    int64
	Name  string
	About string
	Kind  int64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.About,
		arg.Kind,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Kind,
		&i.About,
		&i.Settings,
		&i.Slug,
	)
	return i, err
}

const updateAccountSettings = `-- name: UpdateAccountSettings :exec
UPDATE accounts
SET settings=json(?2)
WHERE id = ?1
`

type UpdateAccountSettingsParams struct {
	ID       int64
	Settings interface{}
}

func (q *Queries) UpdateAccountSettings(ctx context.Context, arg UpdateAccountSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountSettings, arg.ID, arg.Settings)
	return err
}

const accounts = `-- name: accounts :many
SELECT id, name, createdat, updatedat, deletedat, kind, about, settings, slug FROM accounts
`

func (q *Queries) accounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, accounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Kind,
			&i.About,
			&i.Settings,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
